openssl_conf = openssl_init

[openssl_init]
oid_section = OIDs

[ ca ]
# `man ca`
default_ca = CA_root

[ ca_root]
# Directory and file locations.
dir               = ./root-ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/root-ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha3-256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ ca_intermediate]
# Directory and file locations.
dir               = ./intermediate-ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/int-ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated
default_md        = sha3-256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

# Intermediate CA mocking the embedded CA in each platform represented by the
# DeviceId key pair. We use certs signed by this CA as the basis for the
# template generated by the lib/csr crate in Hubris.
[ ca_deviceid_eca ]
# Directory and file locations.
dir               = ./deviceid-eca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/deviceid-eca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated
default_md        = sha3-256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ ca_selfsigned_deviceid_embedded ]
# Directory and file locations.
dir               = ./deviceid-eca-self
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/deviceid-eca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated
default_md        = sha3-256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
localityName            = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
serialNumber            = optional
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
serialNumber            = optional
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha3-256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_root_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
serialNumber                    = Serial Number
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = US
stateOrProvinceName_default     = California
localityName_default            = Emeryville
0.organizationName_default      = Oxide Computer Company
organizationalUnitName_default  = Manufacturing
emailAddress_default            = security@oxidecomputer.com

[ v3_root_ca ]
# Extensions for a typical CA (`man x509v3_config`).
basicConstraints = critical, CA:true # no pathlen, ignored for trusted root
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
basicConstraints = critical, CA:true, pathlen:1
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_deviceid_eca ]
# Extensions for the DeviceId embedded CA
# NOTE: pathlen:0 prevents us from signing any additional intermediates.
# This will prevent us from creating any intermediate embedded CAs.
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
certificatePolicies = critical, tcg-dice-kp-eca, tcg-dice-kp-attestInit

[ v3_alias ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = critical, CA:FALSE
keyUsage = critical, digitalSignature, keyAgreement, keyEncipherment
certificatePolicies = tcg-dice-kp-attestInit
dice-tcb-info=critical, ASN1:SEQUENCE:dice_tcb_info

[ v3_swdsp ]
# will need to adjust the pathlen for deviceid_eca to allow it to sign?
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
certificatePolicies = tcg-dice-kp-eca, tcg-dice-kp-attestInit
dice-tcb-info=critical, ASN1:SEQUENCE:dice_tcb_info

[dice_tcb_info]
field1=IMPLICIT:6,SEQUENCE:fwids

[fwids]
field1=SEQUENCE:sha3_256_null

[sha3_256_null]
field1=OID:2.16.840.1.101.3.4.2.8
field2=FORMAT:HEX,OCTETSTRING:0000000000000000000000000000000000000000000000000000000000000000
#f69338a3130958434be0aa0390389f85ad0577bac4d4c4c4466d6b73f175d037b1480b018b556bc56dfaf828a0c275bb527b818c429cffbcd9cfbb08de43f7d4

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning

[OIDs]
tcg-dice-kp-attestInit = 2.23.133.5.4.100.8
tcg-dice-kp-eca = 2.23.133.5.4.100.12
dice-tcb-info = 2.23.133.5.4.1
